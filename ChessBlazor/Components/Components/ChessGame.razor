@using ChessBlazor.Logic
@using ChessBlazor.Events

@if (GameManager is null)
{
    <p>Loading...</p>
}
else
{
    <div class="game">
        <div id="chess-board">
            <table class="chess-board">
                @{ var squareColor = "white"; }
                @foreach (var i in Enumerable.Range(0, 8))
                {
                    <tr class="chess-board-line">
                        @foreach (var j in Enumerable.Range(0, 8))
                        {
                            <th class=@($"chess-board-square {squareColor}")>
                                <Square OnSquareClick="@HandleSquareClick" IsLit="GameManager.SquareIsLit(i, j)" Piece="GameManager.GetPiece(i, j)" Coordinates="(i, j)"></Square>
                            </th>
                            squareColor = squareColor == "white" ? "black" : "white";
                        }
                    </tr>
                    squareColor = squareColor == "white" ? "black" : "white";
                }
            </table>
        </div>
        <div class="game-hud">
            @if (GameManager.Winner is "white" or "black")
            {
                <h4>Checkmate! @GameManager.Winner wins!</h4>
            }
            <h4>Pieces taken by white</h4>
            <div class="game-hud-pieces-taken">
                @foreach (var piece in GameManager.PiecesTakenByWhite)
                {
                    <img src="@piece.Image" alt="@piece.Name"/>
                }
            </div>
            <h4>Pieces taken by black</h4>
            <div class="game-hud-pieces-taken">
                @foreach (var piece in GameManager.PiecesTakenByBlack)
                {
                    <img src="@piece.Image" alt="@piece.Name"/>
                }
            </div>
            @if (GameManager.IsPromoting)
            {
                @if (!IsOnline || (IsWhite && GameManager.IsWhiteTurn) || (!IsWhite && !GameManager.IsWhiteTurn))
                {
                    <h4>Select a piece to promote</h4>
                    <div class="game-hud-pieces-taken">
                        <button class="btn btn-info" @onclick="@PromoteToQueen">
                            <img src="@($"images/pieces/queen-{GameManager.ColorPromoting}.png")" alt="Queen"/>
                        </button>
                        <button class="btn btn-info" @onclick="@PromoteToTower">
                            <img src="@($"images/pieces/tower-{GameManager.ColorPromoting}.png")" alt="Tower"/>
                        </button>
                        <button class="btn btn-info" @onclick="@PromoteToKnight">
                            <img src="@($"images/pieces/knight-{GameManager.ColorPromoting}.png")" alt="Knight"/>
                        </button>
                        <button class="btn btn-info" @onclick="@PromoteToBishop">
                            <img src="@($"images/pieces/bishop-{GameManager.ColorPromoting}.png")" alt="Bishop"/>
                        </button>
                    </div>
                }
            }
        </div>
    </div>
}

@code {
    private Timer _timer;

    [Parameter]
    public required GameManager GameManager { get; set; }

    [Parameter]
    public bool IsOnline { get; set; }

    [Parameter]
    public bool IsWhite { get; set; }

    protected override Task OnInitializedAsync()
    {
        if (IsOnline)
        {
            _timer = new Timer(_ =>
            {
                InvokeAsync(() => StateHasChanged());
            }, null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
        }

        return Task.CompletedTask;
    }

    private void HandleSquareClick(SquareClickEventArgs args)
    {
        if (IsOnline)
        {
            if (IsWhite && !GameManager.IsWhiteTurn)
            {
                return;
            }
            if (!IsWhite && GameManager.IsWhiteTurn)
            {
                return;
            }
        }
        if (args.MouseEventArgs.Button == 0)
        {
            if (GameManager.ClickSquare(args.Position))
            {
                StateHasChanged();
            }
        }
    }

    private void PromoteToQueen()
    {
        if (IsOnline)
        {
            if (IsWhite && !GameManager.IsWhiteTurn)
            {
                return;
            }
            if (!IsWhite && !GameManager.IsWhiteTurn)
            {
                return;
            }
        }
        GameManager.PromoteTo("Queen");
        StateHasChanged();
    }

    private void PromoteToTower()
    {
        if (IsOnline)
        {
            if (IsWhite && !GameManager.IsWhiteTurn)
            {
                return;
            }
            if (!IsWhite && !GameManager.IsWhiteTurn)
            {
                return;
            }
        }
        GameManager.PromoteTo("Tower");
        StateHasChanged();
    }

    private void PromoteToKnight()
    {
        if (IsOnline)
        {
            if (IsWhite && !GameManager.IsWhiteTurn)
            {
                return;
            }
            if (!IsWhite && !GameManager.IsWhiteTurn)
            {
                return;
            }
        }
        GameManager.PromoteTo("Knight");
        StateHasChanged();
    }

    private void PromoteToBishop()
    {
        if (IsOnline)
        {
            if (IsWhite && !GameManager.IsWhiteTurn)
            {
                return;
            }
            if (!IsWhite && !GameManager.IsWhiteTurn)
            {
                return;
            }
        }
        GameManager.PromoteTo("Bishop");
        StateHasChanged();
    }

}